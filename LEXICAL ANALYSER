#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define MAX_IDENTIFIER_LENGTH 30

void remove_spaces(char* source);
void lexical_analysis(char* source);
int is_operator(char c);
int is_keyword(char* str);
int is_identifier(char* str);
int is_constant(char* str);

int main() {
    char source_code[1000];

    printf("Enter the source code: ");
    fgets(source_code, sizeof(source_code), stdin);

    remove_spaces(source_code);
    lexical_analysis(source_code);

    return 0;
}

void remove_spaces(char* source) {
    char* i = source;
    char* j = source;
    while (*j != '\0') {
        if (*j != ' ' && *j != '\t' && *j != '\n') {
            *i = *j;
            i++;
        }
        j++;
    }
    *i = '\0';
}

void lexical_analysis(char* source) {
    char token[MAX_IDENTIFIER_LENGTH];
    int i = 0, j = 0;

    while (source[i] != '\0') {
        if (is_operator(source[i])) {
            printf("Operator: %c\n", source[i]);
        } else if (isalnum(source[i])) {
            j = 0;
            while (isalnum(source[i]) && j < MAX_IDENTIFIER_LENGTH - 1) {
                token[j++] = source[i++];
            }
            token[j] = '\0';

            if (is_keyword(token)) {
                printf("Keyword: %s\n", token);
            } else if (is_constant(token)) {
                printf("Constant: %s\n", token);
            } else if (is_identifier(token)) {
                printf("Identifier: %s\n", token);
            } else {
                printf("Unknown token: %s\n", token);
            }
            continue;
        }
        i++;
    }
}

int is_operator(char c) {
    char operators[] = "+-*/%=<>!&|";
    for (int i = 0; i < strlen(operators); i++) {
        if (c == operators[i]) {
            return 1;
        }
    }
    return 0;
}

int is_keyword(char* str) {
    char* keywords[] = {"int", "float", "if", "else", "while", "return", "char", "double"};
    int num_keywords = sizeof(keywords) / sizeof(char*);

    for (int i = 0; i < num_keywords; i++) {
        if (strcmp(str, keywords[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

int is_identifier(char* str) {
    if (isalpha(str[0]) || str[0] == '_') {
        for (int i = 1; i < strlen(str); i++) {
            if (!isalnum(str[i]) && str[i] != '_') {
                return 0;
            }
        }
        return 1;
    }
    return 0;
}

int is_constant(char* str) {
    for (int i = 0; i < strlen(str); i++) {
        if (!isdigit(str[i])) {
            return 0;
        }
    }
    return 1;
}
